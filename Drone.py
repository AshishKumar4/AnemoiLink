# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Drone
else:
    import _Drone

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DronePosition_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Drone.DronePosition_t_swiginit(self, _Drone.new_DronePosition_t())
    __swig_destroy__ = _Drone.delete_DronePosition_t

# Register DronePosition_t in _Drone:
_Drone.DronePosition_t_swigregister(DronePosition_t)

class DroneState_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Drone.DroneState_t_swiginit(self, _Drone.new_DroneState_t())
    __swig_destroy__ = _Drone.delete_DroneState_t

# Register DroneState_t in _Drone:
_Drone.DroneState_t_swigregister(DroneState_t)

class DroneSensors_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Drone.DroneSensors_t_swiginit(self, _Drone.new_DroneSensors_t())
    __swig_destroy__ = _Drone.delete_DroneSensors_t

# Register DroneSensors_t in _Drone:
_Drone.DroneSensors_t_swigregister(DroneSensors_t)

class DroneCamera_t(DroneSensors_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Drone.DroneCamera_t_swiginit(self, _Drone.new_DroneCamera_t())

    def getDisparity(self, cam1, cam2):
        return _Drone.DroneCamera_t_getDisparity(self, cam1, cam2)
    __swig_destroy__ = _Drone.delete_DroneCamera_t

# Register DroneCamera_t in _Drone:
_Drone.DroneCamera_t_swigregister(DroneCamera_t)

class DroneIMU_t(DroneSensors_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Drone.DroneIMU_t_swiginit(self, _Drone.new_DroneIMU_t())
    __swig_destroy__ = _Drone.delete_DroneIMU_t

# Register DroneIMU_t in _Drone:
_Drone.DroneIMU_t_swigregister(DroneIMU_t)

CHANNEL_COUNT = _Drone.CHANNEL_COUNT
class DirectController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    connectionStatus = property(_Drone.DirectController_connectionStatus_get, _Drone.DirectController_connectionStatus_set)
    beaconLock = property(_Drone.DirectController_beaconLock_get, _Drone.DirectController_beaconLock_set)

    def InitSequence(self):
        return _Drone.DirectController_InitSequence(self)

    def ConnectChannel(self, ip, port, channel):
        return _Drone.DirectController_ConnectChannel(self, ip, port, channel)

    def __init__(self, *args):
        _Drone.DirectController_swiginit(self, _Drone.new_DirectController(*args))
    __swig_destroy__ = _Drone.delete_DirectController

    def arm(self):
        return _Drone.DirectController_arm(self)

    def disarm(self):
        return _Drone.DirectController_disarm(self)

    def balance(self):
        return _Drone.DirectController_balance(self)

    def altitudeHold(self):
        return _Drone.DirectController_altitudeHold(self)

    def cmd(self, throttle, yaw, roll, pitch, aux1=0, aux2=0, aux3=0, aux4=0):
        return _Drone.DirectController_cmd(self, throttle, yaw, roll, pitch, aux1, aux2, aux3, aux4)

    def setThrottle(self, val):
        return _Drone.DirectController_setThrottle(self, val)

    def setPitch(self, val):
        return _Drone.DirectController_setPitch(self, val)

    def setYaw(self, val):
        return _Drone.DirectController_setYaw(self, val)

    def setRoll(self, val):
        return _Drone.DirectController_setRoll(self, val)

    def setAux(self, channel, val):
        return _Drone.DirectController_setAux(self, channel, val)

    @staticmethod
    def beaconRefresh(obj):
        return _Drone.DirectController_beaconRefresh(obj)

    def printChannels(self):
        return _Drone.DirectController_printChannels(self)

    def startSensorsServer(self):
        return _Drone.DirectController_startSensorsServer(self)

    def getState(self):
        return _Drone.DirectController_getState(self)

    def getPosition(self):
        return _Drone.DirectController_getPosition(self)

    def startCameraServer(self):
        return _Drone.DirectController_startCameraServer(self)

    def getCameraView(self, *args):
        return _Drone.DirectController_getCameraView(self, *args)

# Register DirectController in _Drone:
_Drone.DirectController_swigregister(DirectController)

def DirectController_beaconRefresh(obj):
    return _Drone.DirectController_beaconRefresh(obj)

class Drone(DirectController):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Drone.Drone_swiginit(self, _Drone.new_Drone(*args))

    def setHeading(self, heading):
        return _Drone.Drone_setHeading(self, heading)

    def setRollAngle(self, angle):
        return _Drone.Drone_setRollAngle(self, angle)

    def setPitchAngle(self, angle):
        return _Drone.Drone_setPitchAngle(self, angle)

    def setAltitude(self, altitude):
        return _Drone.Drone_setAltitude(self, altitude)

    def toggleAutoActuator(self, type):
        return _Drone.Drone_toggleAutoActuator(self, type)

    def gotoLocation(self, x, y, z):
        return _Drone.Drone_gotoLocation(self, x, y, z)
    __swig_destroy__ = _Drone.delete_Drone

# Register Drone in _Drone:
_Drone.Drone_swigregister(Drone)

THROTTLE = _Drone.THROTTLE
PITCH = _Drone.PITCH
ROLL = _Drone.ROLL
YAW = _Drone.YAW
AUX_1 = _Drone.AUX_1
AUX_2 = _Drone.AUX_2
AUX_3 = _Drone.AUX_3
AUX_4 = _Drone.AUX_4
class RunningAverage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, blength, seed, alph):
        _Drone.RunningAverage_swiginit(self, _Drone.new_RunningAverage(blength, seed, alph))

    def ExpFilter(self, valIn):
        return _Drone.RunningAverage_ExpFilter(self, valIn)

    def Reset(self, alph):
        return _Drone.RunningAverage_Reset(self, alph)
    __swig_destroy__ = _Drone.delete_RunningAverage

# Register RunningAverage in _Drone:
_Drone.RunningAverage_swigregister(RunningAverage)
cvar = _Drone.cvar

class ManualController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    connectionStatus = property(_Drone.ManualController_connectionStatus_get, _Drone.ManualController_connectionStatus_set)
    uavObject = property(_Drone.ManualController_uavObject_get, _Drone.ManualController_uavObject_set)
    auxBuffers = property(_Drone.ManualController_auxBuffers_get, _Drone.ManualController_auxBuffers_set)

    def __init__(self, *args):
        _Drone.ManualController_swiginit(self, _Drone.new_ManualController(*args))

    def setUAV(self, droneObj):
        return _Drone.ManualController_setUAV(self, droneObj)

    def CalibrateController(self):
        return _Drone.ManualController_CalibrateController(self)

    def ExecutorSerial(self):
        return _Drone.ManualController_ExecutorSerial(self)

    def parseSerialData_syncd(self, sz, scn_max):
        return _Drone.ManualController_parseSerialData_syncd(self, sz, scn_max)

    def filter(self, val, channel):
        return _Drone.ManualController_filter(self, val, channel)

    def StopExecutor(self):
        return _Drone.ManualController_StopExecutor(self)

    def ResumeExecutor(self):
        return _Drone.ManualController_ResumeExecutor(self)
    __swig_destroy__ = _Drone.delete_ManualController

# Register ManualController in _Drone:
_Drone.ManualController_swigregister(ManualController)



